#####DONORSCHOOSE FUNCTIONS

def elapseddays(posted, completed):
    formatuse = '%Y-%m-%d %H:%M:%S' # The format: see down this page:https://docs.python.org/3/library/datetime.html
    otherformat = '%Y-%m-%d'

    try:
        elapsed_days=completed-posted
    except:
        try:
            elapsed_days = datetime.datetime.strptime(completed,formatuse)-datetime.datetime.strptime(posted,formatuse)
        except:
            try:
                elapsed_days = datetime.datetime.strptime(completed,otherformat)-datetime.datetime.strptime(posted,otherformat)
            except:
                elapsed_days = 'error'


    return(elapsed_days)

def elapsedseconds(posted, completed):

    formatuse = '%Y-%m-%d %H:%M:%S' # The format: see down this page:https://docs.python.org/3/library/datetime.html
    otherformat = '%Y-%m-%d'

    posted = row['date_posted']
    completed =row['projectover']
    (posted)

    if isinstance(posted, datetime.datetime) or (type(posted) is pd.Timestamp):
        clock = completed
    else:
        try:
            clock = datetime.datetime.strptime(completed,formatuse)
        except:
            clock = datetime.datetime.strptime(completed,otherformat)

    if isinstance(completed, datetime.datetime) or (type(completed) is pd.Timestamp):
        startclock = completed
    else:
        try:
            startclock = datetime.datetime.strptime(posted,formatuse)
        except:
            startclock = datetime.datetime.strptime(posted,otherformat)

    elapsed = (clock-startclock).total_seconds()

    return(elapsed)


intervals = (
    ('weeks', 604800),  # 60 * 60 * 24 * 7
    ('days', 86400),    # 60 * 60 * 24
    ('hours', 3600),    # 60 * 60
    ('minutes', 60),
    ('seconds', 1),
    )

def display_time(seconds, granularity=2):
    result = []

    for name, count in intervals:
        value = seconds // count
        if value:
            seconds -= value * count
            if value == 1:
                name = name.rstrip('s')
            result.append("{} {}".format(value, name))
    return ', '.join(result[:granularity])

# Function convert seconds into day.decimal
def ConvertSectoDay(n):
    day = n // (24 * 3600)
    #print(day) #keep day
    n = n % (24 * 3600)
    daydec=(n/86400) # add this to day
    addem=day+daydec
    #https://stackoverflow.com/a/48812729/1602288
    holder='{:g}'.format(float('{:.{p}g}'.format(addem, p=5)))
    return(float(holder))

def projectover(posted, completed,expiration):
    formatuse = '%Y-%m-%d %H:%M:%S' # The format: see down this page:https://docs.python.org/3/library/datetime.html
    otherformat = '%Y-%m-%d'

    #failed projects were never completed, so in those cases, use the expiration date
    # if variable is None:
    if completed is None:
        try:
            clock = datetime.datetime.strptime(expiration,formatuse)
        except:
            try:
                clock = datetime.datetime.strptime(expiration,otherformat)
            except:
                clock = datetime.datetime.strptime('1900-01-01',otherformat)
    else:
        try:
            clock = datetime.datetime.strptime(completed,formatuse)
        except:
            try:
                clock = datetime.datetime.strptime(completed,otherformat)
            except:
                clock = datetime.datetime.strptime('1900-01-01',otherformat)

    return(clock)

def makedate(posted):
    formatuse = '%Y-%m-%d %H:%M:%S' # The format: see down this page:https://docs.python.org/3/library/datetime.html
    otherformat = '%Y-%m-%d'

    try:
        clock = datetime.datetime.strptime(posted,formatuse)
    except:
        try:
            clock = datetime.datetime.strptime(posted,otherformat)
        except:
            clock = datetime.datetime.strptime('1900-01-01',otherformat)

    return(clock)
